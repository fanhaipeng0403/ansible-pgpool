- name: Create ~/.ssh directory for root
  file:
    path: ~/.ssh
    state: directory
    mode: '0700'

- name: Delete existing SSH key if it exists
  command: rm -f ~/.ssh/{{ ssh_key_name }}
  ignore_errors: true
  register: root_delete_result
  changed_when: root_delete_result.rc == 0

- name: Generate SSH key without passphrase
  command: ssh-keygen -t rsa -b 4096 -f ~/.ssh/{{ ssh_key_name }} -N "" -q -C ""

- name: Create ~/.ssh directory for postgres
  file:
    path: ~/.ssh
    state: directory
    mode: '0700'
  become: true
  become_user: postgres

- name: Delete existing SSH key if it exists
  command: rm -f ~/.ssh/{{ ssh_key_name }}
  ignore_errors: true
  become: true
  become_user: postgres
  register: postgres_delete_result
  changed_when: postgres_delete_result.rc == 0

- name: Generate postgres SSH Key Pair
  become: true
  become_user: postgres
  command: ssh-keygen -t rsa -b 4096 -f ~/.ssh/{{ ssh_key_name }} -N ""


- name: Delete existing SSH key if it exists
  command: rm -f ~/.ssh/id_rsa
  ignore_errors: true
  become: true
  become_user: postgres
  register: postgres_default_key_delete_result
  changed_when: postgres_default_key_delete_result.rc == 0

- name: Generate postgres default SSH Key Pair
  become: true
  become_user: postgres
  command: ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
 


# from the documentation https://www.pgpool.net/docs/43/en/html/example-cluster.html#EXAMPLE-CLUSTER-PRE-SETUP
# we need to enable passwordless ssh on all server with a key named id_rsa_pgpool, the default name of the key
# used by the failover.sh, follow_master.sh, recovery_1st_stage and pgpool_remote_start scripts
- name: ssh passwordless with id_rsa_pgpool 
  command: sshpass -p {{ postgres_os_password_cleartext }} ssh-copy-id -i ~/.ssh/{{ ssh_key_name }} -o StrictHostKeyChecking=no postgres@{{ item }}
  with_items: "{{ groups['masters'] }}"

- name: ssh passwordless with id_rsa_pgpool for user postgres
  command: sshpass -p {{ postgres_os_password_cleartext }} ssh-copy-id -i ~/.ssh/{{ ssh_key_name }} -o StrictHostKeyChecking=no postgres@{{ item }}
  with_items: "{{ groups['masters'] }}"
  become: true
  become_user: postgres

- name: ssh default key passwordless with id_rsa for user postgres
  command: sshpass -p {{ postgres_os_password_cleartext }} ssh-copy-id -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no postgres@{{ item }}
  with_items: "{{ groups['masters'] }}"
  become: true
  become_user: postgres